类与对象、封装、构造方法
    1.1 面向对象概述
        1：面向过程：对需要实现一个功能的时候，每一个具体的步骤都要亲力亲为，详细处理每一个细节。
        2：面向对象：当需要实现一个功能的时候，不关心具体的步骤，而是找一个已经具有该功能的人，来帮我做事。
    1.2 面向对象特点
        三大基本特征：封装，继承，多态。
    1.3 类与对象关系
        类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。
        对象：是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为。
        类是对一类事物的描述，是抽象的。
        对象是一类事物的实例，是具体的。
        类是对象的模板，对象是类的实体。
    1.4 类的定义
        1：成员变量：对应事物的属性
           成员方法：对应事物的行为
        2：定义格式：
            public class ClassName{
            //成员变量
            //成员方法
            }
    1.5 成员变量和局部变量的区别
        1：定义位置不一样
            局部变量：在方法内部
            成员变量：在方法外部，直接写在类当中
        2：作用范围不一样
            局部变量：只有方法当中才可以使用，出了方法就不能用了
            成员变量：整个类全都可以通用
        3：默认值不一样
            局部变量：没有默认值，如果想使用，必须手动进行赋值
            成员变量：如果没有赋值，会有默认值，规则和数组一样
        4：内存位置不一样
            局部变量：位于栈内存
            成员变量：位于堆内存
        5：生命周期不一样
            局部变量：随着方法进栈而诞生，随着方法出栈而消失
            成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失
    1.7 封装性
        1：在Java中的体现：
            方法是一种封装；
            关键字private是一种封装；
        2：封装就是将一些细节信息隐藏起来，对于外界不可见
    1.8 Private关键字
        1：一旦成员变量使用private进行修饰，本类当中仍然可以随意访问。但是超出本类范围之外就不能直接访问了。
        2：间接访问private成员变量，就是定义一对儿Getter/Setter方法：
            必须是setXxx，getXxx的命名规则。
            对于Getter来说，不能有参数，返回值类型和成员变量对应；
            对于Setter来说，不能有返回值，参数类型和成员变量对应；
            注意事项：对于基本类型是boolean值的成员变量，Getter方法的命名格式比必须是isXxx。
    1.9 this关键字
        1：当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。
        2：如果想要访问本类中的成员变量，需要使用格式：
            this.成员变量名
        3：通过“谁”调用的方法“谁”就是this。
    1.10 构造方法
        1：构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。
        2：格式：
            public 类名称(参数类型 参数名称){
                方法体
            }
        3：注意事项：
            构造方法名称必须和所在类名称完全一样，大小写也一样；
            构造方法不写返回值类型；
            构造方法不能return一个具体的返回值；
            如果没有编写任何构造方法，那么编译器会默认赠送一个构造方法，没有参数，方法体什么事情都不做；
            一旦编写了至少一个构造方法，那么编译器将不再赠送构造方法;
            构造方法也是可以进行重载的（重载：方法名称相同，参数列表不同）
