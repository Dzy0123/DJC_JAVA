    2.3 接口
        1：概念：接口就是多个类的公共的规范标准。接口是一种引用类型数据。其中最重要的内容是他的抽象方法。
                只要符合规范标准，就可以大家通用。
        2：接口定义基本格式：
            public interface 接口名称{
                //接口的内容
            }
        3：接口当中的内容：
            如果是Java7：
                常量；
                抽象方法；
            如果是Java8：
                默认方法；
                静态方法；
            如果是Java8：
                私有方法；
        4：接口当中抽象方法的定义：
            public abstract 返回值类型 方法名称(参数列表);
            注意事项：
                接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract
                这两个关键字修饰符，可以选择性地省略。
        5：接口使用步骤：
            接口不能直接使用，必须有一个“实现类”来实现该接口：
                格式：
                    public class 实现类名称 implements 接口名称{
                        //...
                    }
            接口的实现类必须覆盖重写接口中所有的抽象方法：
                去掉abstract关键字，加上方法体大括号。
            创建实现类对象进行使用。
            注意事项：
                如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己必须是抽象类。
        6：接口的默认方法定义：
            格式：
                public default 返回值类型 方法名称(参数列表){
                    方法体
                }
            备注：
                接口当中的默认方法，可以解决接口升级的问题;
                接口的默认方法，可以通过接口的实现类对象直接调用；
                接口的默认方法也可以被接口实现类进行覆盖重写；
        7：接口的静态方法的定义：
            格式：
                public static 返回值类型 方法名称(参数列表){
                    方法体
                }
            备注：
                不能通过接口实现类的对象来调用接口当中的静态方法；
                应该通过接口名称直接调用其中的静态方法。
                格式： 接口名称.静态方法名(参数)
        8：接口的私有方法定义：(Java 9)
            格式：
                普通私有方法：解决多个默认方法之间重复代码问题
                    格式：private 返回值类型 方法名称(参数列表){
                            方法体
                         }
                静态私有方法：解决多个静态方法之间重复代码问题
                    格式：private static 返回值类型 方法名称(参数列表){
                            方法体
                         }
        9：接口的常量定义和使用：
            格式：
                public static final 数据类型 常量名称 = 数据值;
                一旦使用final关键字进行修饰，说明不可改变;
            注意事项：
                接口当中的常量必须就行赋值，不能不赋值；
                接口中常量名称使用完全大写的字母，并且用下划线分割。
        10：继承父类并实现多个接口：
            使用接口时应注意：
                接口是没有静态代码块或者构造方法的；
                一个类的直接父类是唯一的，但是一个类可以同时实现多个接口：
                    格式：
                        public class MyInterfaceImpl implements MyInterfaceA,MyInterfaceB{
                            //覆盖重写所有抽象方法
                        }
                如果实现类所实现的多个接口中，存在重复的抽象方法，那么只需要覆盖一次即可；
                如果实现类没有覆盖重写所有接口中的所有方法，那么实现类必须是一个抽象类；
                如果实现类所实现的多个接口中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写；
                如果一个类的直接父类当中的方法和接口当中的默认方法产生了冲突，优先使用父类当中的方法。
        11：接口之间的多继承
            类与类之间是单继承的。直接父类只有一个。
            类与接口之间是多实现的。一个类可以实现多个接口。
            接口与接口之间是多继承的：
                注意事项：
                    如果多个父接口当中的抽象方法如果重复不影响什么；
                    如果多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写【而且带着default关键字】。