File类和IO流
    6.1 File类
        1：File类概述：
            java.io.File：
                文件和目录路径名的抽象表示形式。
                java把电脑中的文件和文件夹（目录）封装为了一个File类，我们可以使用File类对文件和文件夹进行操作。
                我们可以使用File类的方法：
                    创建文件/文件夹；
                    删除文件/文件夹；
                    获取文件/文件夹；
                    判断文件/文件夹是否存在；
                    对文件/文件夹进行遍历；
                    获取文件的大小；
                File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法
            重点：
                file：文件；
                directory：文件夹/目录；
                path：路径；
        2：File类的静态成员变量：
            static String pathSeparator
                      与系统有关的路径分隔符，为了方便，它被表示为一个字符串。
            static char pathSeparatorChar
                      与系统有关的路径分隔符。
            static String separator
                      与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。
            static char separatorChar
                      与系统有关的默认名称分隔符。
            路径分隔符 windows:分号 linux:冒号；
            默认名称分隔符 windows:反斜杠 linux:正斜杠。
                文件路径：
                    c:\develop\a\a.tex
                操作路径写法：
                    "c:"+File.pathSeparator+"develop"+File.pathSeparator+"a"+File.pathSeparator+"a.tex"
        3：绝对路径和相对路径：
            绝对路径：
                是一个完整的路径；
                以盘符（c:、 D:......）开始的路径；
                    D:\\demo\\b.txt
            相对路径：
                是一个简化的路径；
                相对指的是相对于当前项目的根目录；
                如果使用当前项目的根目录，路径可以简化书写；
                    b.txt
            注意：
                路径不区分大小写；
                路径中的文件名称分隔符windows使用反斜杠，反斜杠是转义字符，两个反斜杠表示一个普通的反斜杠。
        4：File类的构造方法：
            File(String pathname)：
                通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。
                参数：
                    String pathname：字符串的路径名称
                    路径可以是以文件结尾，也可以是以文件夹结尾；
                    路径可以是相对路径，也可以是绝对路径；
                    路径可以是存在的也可以是不存在的；
                    创建File对象，只是把字符串路径封装为File对象，不考虑路径的真假情况；
            File(String parent, String child)：
                根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。
                参数：
                    File parent：父路径；
                    child parent：子路径；
                好处：
                    父路径和子路径，可以单独的出现，使用起来非常灵活；
                    父路径和子路径都可以变化；
            File(File parent, String child)：
                根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。
                参数：
                    File parent：父路径；
                    child parent：子路径；
                好处：
                    父路径和子路径都可以变化；
                    父路径是File类型，可以使用File的方法对路径进行操作，在使用路径创建对象。
        5：File类获取功能的方法：
            String getAbsolutePath()
                返回此抽象路径名的绝对路径名字符串。
                    获取的是构造方法中传递的路径；
                    无论路径是绝对的还是相对的，getAbsolutePath返回的都是绝对路径
            String getPath()
                将此抽象路径名转换为一个路径名字符串。
            String getName()
                返回由此抽象路径名表示的文件或目录的名称。
                获取的就是构造方法传递路径的结尾部分(文件或文件夹)
            long length()
                返回由此抽象路径名表示的文件的长度。
                注意：
                    文件夹是没有长度概念，所以不能获取文件夹长度；
                    如果构造方法中给出的路径不存在，那么length返回0；
        6：File类判断功能的方法：
            boolean exists()
                测试此抽象路径名表示的文件或目录是否存在。
                用于判断构造方法中的路径是否存在：
                    存在：返回true
                    不存在：返回false
            boolean isDirectory()
                测试此抽象路径名表示的文件是否是一个目录。
                用于判断构造方法中给定的路径是否以文件夹结尾：
                    是：返回true
                    否：返回false
            boolean isFile()
                测试此抽象路径名表示的文件是否是一个标准文件。
                用于判断构造方法中的路径是否以文件结尾：
                    是：返回true
                    否：返回false
        7：File类创建删除功能的方法：
            boolean createNewFile()
                当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件。
                创建文件的路径和名称在构造方法中给出（构造方法的参数）；
                返回值是布尔值：
                    文件不存在：创建文件并返回true；
                    文件存在：不会创建并返回false
                注意：
                    此方法只能创建文件不能创建文件夹；
                    创建文件的路径必须存在，否则会抛出异常。
            boolean delete()
                删除此抽象路径名表示的文件或目录。
                此方法可以删除构造方法路径中给出的文件夹/文件。
                返回值是布尔值：
                    文件/文件夹删除成功：返回true；
                    文件夹中有内容/构造方法中的路径不存在：返回false
                注意：
                    此方法直接在硬盘删除文件/文件夹，不经过回收站。
            boolean mkdir()
                创建此抽象路径名指定的目录。
                只能创建单级文件夹
                创建文件的路径和名称在构造方法中给出（构造方法的参数）；
                返回值是布尔值：
                    文件夹不存在：创建文件夹并返回true；
                    文件夹存在：不会创建并返回false，构造方法中给出的路径不存在也返回false
                注意：
                    此方法只能创建文件夹不能创建文件。
            boolean mkdirs()
                创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。
                既可以创建单级文件夹，也可以创建多级文件夹
                创建文件的路径和名称在构造方法中给出（构造方法的参数）；
                返回值是布尔值：
                    文件夹不存在：创建文件夹并返回true；
                    文件夹存在：不会创建并返回false，构造方法中给出的路径不存在也返回false
                注意：
                    此方法只能创建文件夹不能创建文件。
        8：File类遍历（文件夹）目录功能：
            String[] list()：
                返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中的文件和目录。
                返回一个String数组，表示该File目录中的所有子文件或目录
            File[] listFiles()
                返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。
                返回一个File数组，表示该File目录中的所有子文件或目录
            注意：
                list方法和listFiles方法遍历的是构造方法中给出的目录；
                如果构造方法中给出目录的路径不存在，就会抛出空指针异常；
                如果构造方法中给出的路径不是一个目录，也会抛出空指针异常。
    6.2 递归
        1：概述：
            指在当前方法内调用自己的这种现象。
            递归的分类：
                直接递归：方法自身调用自己；
                间接递归：A方法调用B方法，B方法调用C方法，C方法调用A方法；
            注意事项：
                递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出；
                在递归中虽然有限定条件，但是递归的次数不能太多，否则也会发生栈内存溢出；
                构造方法禁止递归。
            使用前提：
                当调用方法的时候，方法的主体不变，每次调用方法的参数不同，可以使用递归。
    6.3 过滤器
        1：FileFilter过滤器的原理和使用
            在File类中有两个和listFiles重载的方法，方法的参数传递的就是过滤器：
                File[] listFiles(FileFilter filter)
                    返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。
                    java,io.FileFilter接口，用于抽象路径名(File对象)的过滤器，用来过滤文件。
                    抽象方法：用来过滤文件的方法：
                        boolean accept(File pathname)：
                            测试指定抽象路径名是否应该包含在某个路径名列表中
                        参数：
                            File pathname：使用listFiles方法遍历目录得到的每一个文件对象
                File[] listFiles(FilenameFilter filter)
                    返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。
                    java,io.FilenameFilter接口，实现此接口的类实例可用于过滤文件名，用来过滤文件名称。
                    抽象方法：用来过滤文件的方法
                        boolean accept(File dir,String name)：
                            测试指定文件是否应该包含在某一文件列表中
                        参数：
                            File dir：构造方法传递的被遍历的目录
                            String name：使用listFiles方法遍历目录，获取的每一个文件/文件夹的名称
                注意事项：
                    两个过滤器接口没有实现类，需要我们自己写实现类；
                    重写过滤的方法accept，在方法中自己定义过滤的规则。