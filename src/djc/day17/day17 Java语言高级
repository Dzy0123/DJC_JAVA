异常与多线程
    5.1 异常
        1：概念：
            指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。
            异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。
            Java处理异常的方式是中断处理。
        2：体系：
            java.lang.Throwable是 Java 语言中所有错误或异常的超类。
            其中有两个子类：
                java.lang.Error；
                java.lang.Exception；
            平常说的异常就是Exception。
        3：异常分类：
            Exception：编译期异常；
                RuntimeException：运行期异常；
            Error：错误。
        4：throw关键字：
            作用：
                可以使用throw关键字在指定的方法中抛出指定的异常。
            使用格式：
                throw new xxxException("异常产生的原因")。
            注意：
                throw关键字必须写在方法内部；
                throw关键字后边new的对象必须是Exception或者Exception的子类对象
                throw关键字抛出指定的异常对象，我们就必须处理这个异常对象：
                    throw关键字后面创建的是RuntimeException或者是RuntimeException的子类，
                    我们可以不处理，默认交给JVM处理（打印异常对象，中断程序）；
                    throw关键字后面创建的是编译异常，要么throws，要么try...catch。
        5：throws关键字：
            异常处理的第一种方式，交给别人处理。
            作用：
                当方法内部抛出异常对象的时候，我们就必须处理这个异常对象；
                可以使用throws关键字处理异常对象：
                    会把异常对象声明抛出给方法的调用者处理（自己不处理，给别人处理）；
                    最终交给JVM处理-->中断处理。
            使用格式：在方法声明时使用
                修饰符 返回值类型 方法名(参数列表) throws AAAException,BBBException...{
                    throw new AAAException("产生原因");
                    throw new BBBException("产生原因");
                    ...
                }
            注意：
                throws关键字必须写在方法声明处；
                throws关键字后面声明的异常必须是Exception或者是Exception的子类；
                方法内部如果抛出了多个异常对象，那么throws对象后边必须也声明多个异常，
                    如果抛出的多个异常对象有子父类关系，那么直接声明父类异常即可；
                调用了一个声明抛出异常的方法，我们就必须处理声明的异常：
                    要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM处理；
                    要么try...catch自己处理异常。
        6：捕获异常try...catch
            异常的第二种处理方式，自己处理异常。
            使用格式：
                try{
                    可能产生异常的代码
                }catch(定义一个异常的变量用来接收try中抛出的异常对象){
                    异常的处理逻辑，产生异常对象之后，怎么处理对象；
                    一般在工作中会把异常的信息记录到一个日志中
                }
                ...
                catch(异常类名 变量名){
                    处理逻辑；
                }
            注意：
                try中可能会抛出多个异常对象，那么就可以使用多个catch来处理这些异常对象；
                如果try中产生了异常，那么就会执行catch中的异常处理逻辑，执行完毕catch中的处理逻辑，
                    继续执行try...catch之后的代码；
                如果try中没有产生异常，那么就不会执行catch中异常的处理逻辑，执行完try中的代码，
                    继续执行try...catch之后的代码。
        7：Throwable类中三个异常处理的方法：
            public String getMessage()：
                返回此 throwable 的简短描述。
            public String toString()：
                返回此 throwable 的详细消息字符串。
            public void printStackTrace()：
                JVM打印异常对象，默认此方法，打印的异常信息最全面。
        8：finally代码块：
            finally：
                有一些特定的代码无论异常是否发生，都需要执行。
            使用格式：
                try{
                    可能产生异常的代码
                }catch(定义一个异常的变量用来接收try中抛出的异常对象){
                    异常的处理逻辑，产生异常对象之后，怎么处理对象；
                    一般在工作中会把异常的信息记录到一个日志中
                }
                ...
                catch(异常类名 变量名){
                    处理逻辑；
                }finally{
                    无论是否出现异常都会执行
                }
            注意：
                finally不能单独使用，必须和try一起使用；
                finally一般用于资源释放（资源回收），无论程序是否出现异常，最后都要资源释放（IO）。
        9：异常注意事项：
            多个异常使用捕获的处理方法：
                多个异常，分别捕获，分别处理：
                多个异常，一次捕获，多次处理：
                    注意：
                        一个try多个catch，catch里面定义的异常变量如果有子父类关系，
                        那么子类的异常变量必须写在上面，否则报错。
                        因为try中如果出现了异常对象，会把异常对象抛出给catch处理，
                        抛出的异常对象，会从上到下依次赋值给catch中定义的异常变量。
                多个异常，一次捕获，一次处理
            注意：
                运行时异常被抛出可以不处理，既不捕获也不声明抛出，直接终止程序；
                如果finally有return语句，永远返回finally中的结果，避免该情况；
                如果父类抛出了多个异常，子类重写父类方法时，抛出和父类相同的异常或者是
                    父类异常的子类或者不抛出异常；
                父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类
                    产生异常，只能捕获处理，不能声明抛出。
        10：自定义异常类：
            Java提供的异常类不够我们使用，需要自己定义一些异常类。
            格式：
                public class XXXException extends Exception/RuntimeException {
                    添加一个空参构造方法；
                    添加一个带异常信息的构造方法；
                }
            注意：
                自定义异常类，一般都是以Exception结尾，说明该类是一个异常类；
                自定义异常类，必须得继承Exception或者RuntimeException：
                    继承Exception：
                        自定义的异常类就是一个编译期异常；
                        如果方法内部抛出了编译期异常，就必须处理这个异常；
                        要么throws，要么try...catch；
                    继承RuntimeException：
                        自定义异常类就是一个运行期异常；
                        无需处理，交给JVM处理（中断处理）。