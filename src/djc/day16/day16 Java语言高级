    4.7 Map集合
        1：概述：
            public interface Map<K,V>，将键映射到值的对象。
            类型参数：
                K - 此映射所维护的键的类型
                V - 映射值的类型
            特点：
                Map集合是一个双列集合，一个元素包含两个值（key和value）；
                Map集合中的元素，key和value的数据类型可以相同也可以不同。
                一个映射不能包含重复的键，每个键最多只能映射到一个值（key不能重复，value可以重复）；
                Map集合中的元素，key和value是一一对应的。
        2：Map常用子类：
            java.util.HashMap<K,V>：
                HashMap集合底层是哈希表，查询速度很快；
                HashMap集合是一个无序集合，存储元素和取出元素的顺序有可能不一致。
            java.util.LinkedHashMap<K,V>
                LinkedHashMap集合底层是哈希表+链表（保证迭代的顺序）；
                LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序是一致的。
        3：常用方法：
            V put(K key,V value)：
                将指定的值与此映射中的指定键关联（可选操作）。
            V get(Object key)：
                返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。
            V remove(Object key)：
                如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。
            boolean containsKey(Object key)：
                如果此映射包含指定键的映射关系，则返回 true。
        4：Entry键值对对象：
            public static interface Map.Entry<K,V>，映射项（键-值对）。
                是Map接口的一个内部接口。
            作用：
                当Map集合一创建，那么就会在Map集合中创建一个Entry对象，用来记录键与值(键值对对象)。
        5：遍历Map集合：
            Set<K> keySet()：
                返回此映射中包含的键的 Set 视图；
                把Map集合中的所有键存储到一个Set集合中。
                之后用Map集合的get()方法获取key对应的value
            Set<Map.Entry<K,V>> entrySet()：
                返回此映射中包含的映射关系的 Set 视图；
                把Map集合内部的多个Entry对象取出来存储到一个Set集合中。
                之后用getKey()方法获取key，用getValue()方法获取value。
        6：HashMap存储自定义类型键值：
            Map集合保证key是唯一的：
                作为key的元素，必须重写hashCode方法和equals方法，以保证key唯一。
        7：LinkedHashMap：
            java.util.LinkedHashMap<K,V>继承了HashMap集合。
            Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序。
            底层原理：
                哈希表+链表（记录元素顺序）
        8：Hashtable集合：
            java.util.Hashtable<K,V>，此类实现一个哈希表，该哈希表将键映射到相应的值。
            任何非 null 对象都可以用作键或值。
            特点：
                底层也是一个哈希表，是一个线程安全的集合也就是单线程的集合，速度慢。
                不能存储null值和null键；
                Hashtable和Victor一样，在jdk1.2版本之后被更先进的集合取代了；
                唯一还在使用的是和IO流有关的Properties集合
        9：DeBug追踪：
            Debug调试程序:
                可以让代码逐行执行,查看代码执行的过程,调试程序中出现的bug
                使用方式:
                    在行号的右边,鼠标左键单击,添加断点(每个方法的第一行,哪里有bug添加到哪里)
                    右键,选择Debug执行程序
                    程序就会停留在添加的第一个断点处
                执行程序:
                    f8:逐行执行程序
                    f7:进入到方法中
                    shift+f8:跳出方法
                    f9:跳到下一个断点,如果没有下一个断点,那么就结束程序
                    ctrl+f2:退出debug模式,停止程序
                    Console:切换到控制台