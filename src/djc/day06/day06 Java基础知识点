数组
    16.1 概念
        数组：是一种容器，可以同时存放多个数据值
    16.2 特点
        1.数组是一种引用数据类型；
        2.数组当中的多个数据，他们的类型必须统一；
        3.数组长度在程序运行期间不可改变；
    16.3 定义格式
        1：数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。
        2：两种常见的初始化方式：
            动态初始化（指定长度）
            静态初始化（指定内容）
        3：动态初始化格式：
            数据类型[] 数组名称 = new 数据类型[数组长度];
            解析：左侧数据类型，也就是数组当中保存的数据，全都是统一的类型；
                 左侧的中括号，代表我是一个数组；
                 左侧数组名称，给数组取一个名字；
                 左侧的new,代表创建数组的动作；
                 右侧的数据类型必须和左侧数据类型保持一致；
                 右侧中括号的长度，也就是数组当中到底可以保存多少个数据，是一个int数据。
        4：静态初始化格式：
            数据类型[] 数据名称 = new 数据类型[]{元素1，元素2，...，元素n};
            注意事项：静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出来长度。
        5：静态初始化的省略格式：
            数据类型[] 数据名称 = {元素1，元素2，...，元素n};
            注意事项：
                静态初始化标准格式可以拆分成为两个步骤：
                    数据类型[] 数据名称;
                    数据名称 = new 数据类型[]{元素1，元素2，...，元素n};
                动态初始化也可以拆分为两个步骤：
                    数据类型[] 数据名称;
                    数据名称 = new 数据类型[数组长度];
                静态初始化一旦要拆分成两个步骤就不能用省略格式。
            使用建议：如果不确定数组当中的具体内容，用动态初始化；如果确定了具体的内容，用静态初始化。
    16.4 访问数组元素进行获取
        1：直接打印数组名称，得到的是数组对应的内存地址哈希值。
        2：访问静态初始化数组元素的格式：
            数据名称[索引值]
            索引值：就是一个int数字，代表数组当中元素的编号。索引值从0开始，一直到“数组的长度-1”为止。
        3：访问动态初始化数组元素的格式：
            使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值，规则如下：
                如果是整数类型，默认值为0；
                如果是浮点类型，默认值为0.0；
                如果是字符类型，默认值为'\u0000'；
                如果是布尔类型，默认值为false；
                如果是引用类型，默认值为null；
        4：注意事项：
            静态初始化也有默认值的过程，只不过系统马上自动将默认值替换成为了大括号当中的具体数值。
    16.5 Java中的内存划分
        Java的内存需要划分为5个部分：
        1：栈（Stack）：存放的都是方法中的局部变量。方法的运行一定在栈中。
            局部变量：方法的参数，或者是方法{}内部的变量。
            一旦超出作用域，立刻从栈内存当中消失。
        2：堆（Heap）：凡是new出来的东西都在堆当中。
            堆内存当中的东西都有一个地址值：16进制
            堆内存里面的数据都有默认值，规则：
                如果是整数类型，默认值为0；
                如果是浮点类型，默认值为0.0；
                如果是字符类型，默认值为'\u0000'；
                如果是布尔类型，默认值为false；
                如果是引用类型，默认值为null；
        3：方法区（Method Area）：存储.class相关信息，包含方法的信息。
        4：本地方法栈（Native Method Stack）：与操作系统相关。
        5：寄存器（pc Register）：与CPU相关。
