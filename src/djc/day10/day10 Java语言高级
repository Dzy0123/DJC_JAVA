继承与多态
    2.1 继承
        1：概述：
            继承是多态的前提。主要解决的问题就是“共性抽取”。
            子类（派生类）继承父类（基类、超类）。
        2：继承关系中的特点：
            子类可以拥有父类“内容”；
            子类可以拥有自己专有的“内容”。
            在继承关系中，“子类就是一个父类”。也就是说子类可以被当做父类看待。
        3：格式：
            定义父类格式（普通类格式）：
                public class 父类名称(){
                    //...
                }
            定义子类格式：
                public class 子类名称 extends 父类名称{
                    //...
                }
        4：继承中成员变量的访问特点：
            父类对象只能访问父类的成员变量，不能访问子类的成员变量；
            子类对象既可以访问父类的成员变量，也可以访问子类的成员变量；
            在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问规则是：
                直接访问：
                    直接通过子类对象访问成员变量，"."左边是哪个类就优先用谁，没有则向父类找；
                简介访问：
                    间接通过成员方法访问成员变量,方法属于谁，就优先用谁的成员变量，没有则向父类找。
        5：区分子类方法中重名的三种变量：
            局部变量：
                直接写
            子类成员变量：
                this.成员变量名
            父类成员变量：
                super.成员变量名
        6：继承中成员方法的访问特点：
            父类对象只能访问父类的成员方法，不能访问子类的成员方法；
            子类对象既可以访问父类的成员方法，也可以访问子类的成员方法；
            在父子类的继承关系当中，如果成员方法重名，则创建子类对象时，访问规则是：
                创建的对象是哪个类就优先用谁的成员方法，如果没有则向父类找。
            注意事项：无论是成员方法还是成员变量，如果没有都是向上找，绝对不会向下找子类！
        7：继承中方法的覆盖重写：
            在继承关系当中，方法的名称一样，参数列表也一样。此时就产生了方法的重写(Override)。
            重写（Override）：方法的名称一样，参数列表也一样。也叫覆盖、覆写。
            重载（Overload）：方法的名称一样，参数列表不一样
        8：方法的覆盖重写的特点：
            创建的是子类对象，则优先用子类方法。
            注意事项：
                必须保证父子类之间的方法名称相同，参数列表也相同；
                @Override：写在方法前面用来检测是否是有效的正确覆盖重写
                子类方法的返回值必须【小于等于】父类方法的返回值类型；
                Object类是所有类的公共最高父类（祖宗类）
                子类方法的权限必须【大于等于】父类方法的权限修饰符；
                public > protected > (default) > private
                备注：(default)不是关键字default,而是什么都不写，留空。
        9：继承中构造方法的访问特点：
            子类构造方法当中有一个默认隐含的“super()”调用；
            所以一定是先调用的父类构造方法，后执行的子类构造方法；
            可以通过super关键字来使子类构造调用父类重载构造；
            super的父类构造调用，必须是子类构造方法的第一个语句，不能一个子类构造调用多次super构造。
            总结：
                子类必须调用父类构造方法；
                不写则赠送super()；
                写了则用写的指定的super调用；
                super只能有一个还必须是第一个。
        10：super关键字的三种用法：
            在子类的成员方法中，访问父类的成员变量。
            在子类的成员方法中，访问父类的成员方法。
            在子类的构造方法中，访问父类的构造方法。
        11：this关键字的三种用法：
            在本类的成员方法中，访问本类的成员变量；
            在本类的成员方法中，访问本类的另一个成员方法；
            在本类的构造方法中，访问本类的另一个构造方法；
            注意事项：super构造调用和this构造调用不能同时使用。
        12：Java继承的三个特点：
            Java语言是单继承的：
                一个类的直接父类只能有唯一一个。
            Java语言可以多级继承；
            一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类。
    2.2 抽象类
        1：如果父类当中的方法不确定如何进行{}方法体实现，那么这就应该是一个抽象方法。
        2：定义格式：
            抽象类：public abstract class 类名称(){}
            抽象方法：public abstract 方法类型 方法名称();
        3：使用：
            不能直接创建new抽象类对象；
            必须用一个子类来继承抽象父类；
            子类必须覆盖重写抽象父类当中所有的抽象方法：
                覆盖重写：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。
            创建子类对象进行使用。
        4：注意事项：
            抽象类不能创建对象，如果创建，编译无法通过而报错，只能创建其非抽象子类的对象；
            抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的；
            抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类；
            抽象类的子类，必须覆盖重写抽象父类中所有的抽象方法，否则编译无法通过而报错。除非该子类也是抽象类。
