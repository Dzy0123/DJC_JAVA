常量
    4.1 概述
              常量：是指在Java程序运行期间固定不变的数据
    4.2 分类：
              整数常量：所有的整数（0，1,567，-9）
              浮点数常量：所有的小数（0.0，-0.1,2.55）
              字符常量：单引号引起来，只能写一个字符，必须有内容（'a','好'）
              字符串常量：双引号引起来，可以写多个字符，也可以不写（"A","Hello","你好"，""）
              布尔常量：只有两个值（true,false）
              空常量：只有一个值（null）

变量和数据类型
    5.1 数据类型分类
        1：Java的数据类型分为两大类：
              基本数据类型：整数、浮点数、字符、布尔
              引用数据类型：类、数组、接口、字符串、Lambda
        2：基本数据类型：
              数据类型        关键字        内存占用        取值范围
              字节型          byte          1个字节         -128~127
              短整型          short         2个字节         -32768~32767
              整型            int(默认)     4个字节         -2^31~2^31-1
              长整型          long          8个字节         -2^63~2^63-1
              单精度浮点数     float         4个字节         1.4013E-45~3.4028E+38
              双精度浮点数     double(默认)  8个字节         4.9E-324~1.7977E+308
              字符型          char          2个字节         0~65535
              布尔类型        boolean       1个字节         true false
        3：注意事项：
              浮点型可能只是一个近似值，并非精确的值；
              数据范围不一定与字节数相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节；
              浮点数中默认类型是double，如果一定要用float，需加上一个后缀F；
              整数默认类型是int，如果一定要用long，需要加上一个后缀L。
    5.2 变量概述
        1：变量：在Java程序中可以变化的量称为变量
        2：程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决很多问题。比如x保存5，x也可以保存6，这样x保存的数据是可以改变的，也就是我们所讲的变量。
        3：Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型
        4：格式：
              数据类型 变量名称 //创建了一个变量
              变量名称 = 数据值 //赋值，将右边的数据值，赋值给左边的变量
              数据类型 变量名称 = 数据值 //在创建一个变量的同时，立刻放入指定的数据值
        5：注意事项：
              如果创建多个变量，那么变量之间的名称不可以重复；
              对于float和long类型来说，字母后缀 F 和 L 不能忘记；
              如果使用byte或者short类型的变量，那么右侧的数据值范围不能超过左侧类型的范围；
              没有进行赋值的变量不能直接使用，一定赋值以后才能使用；
              变量使用不能超出作用域的范围【作用域：从定义变量的一行开始，一直到直接所属的大括号结束为止】；
              可以通过一个语句创建多个变量，但一般情况不推荐这样写；

数据类型转换
    6.1 当数据类型不一样时将会发生数据类型转换
        1：自动类型转换（隐式）
              特点：代码不需要进行特殊处理，自动完成。
              规则：数据范围从小到大。
        2：强制类型转换（显式）
              特点：代码需要特殊的格式处理，不能自动完成。
              格式：范围小的类型 范围小的变量名 = （范围小的类型）原本范围大的数据。
              注意事项：
                       一般不推荐使用，因为有可能发生精度损失、数据溢出；
                       byte/short/char 这三种类型都可以发生数学运算，例如加法“+”；
                       byte/short/char 这三种类型在运算的时候，都会被首先提升成为int类型，然后再进行计算。
                       boolean类型不能发生数据类型转换

ASCII码表
    7.1 '0'-48;
        'A'-65;
        'a'-97;

运算符
    8.1 算术运算符
        1：四则运算符：+、-、*、/
        2：取模运算：%
        3：注意事项：
               一旦运算中有不同类型的数据，那么结果将会是数据类型大的那种；
        4：四则运算中的加号的三种用法：
               对于数值来说，那就是加法；
               对于字符char型来说，在计算之前，char会被提升成为int，然后再计算；
               对于字符串String来说，加号代表连接操作；
               任何数据类型和字符串进行连接的时候，结果都会变成字符串；
        5：自增自减运算符：++、--；
               基本含义：让一个变量涨一个数字1，或者让一个变量降一个数字1
               使用格式：写在变量名称之前，或者写在变量名称之后。例如++num,num++
               使用方式：单独使用：不和其他任何操作混合，自己独立成为一个步骤；
                         混合使用：和其他操作混合，例如与赋值混合，或者与打印操作混合等。
               使用区别：单独使用时，前++和后++没有任何区别
                         混合使用时，如果是前++，那么变量立刻+1，如果是后++，那么首先使用变量本来的值，然后再让变量+1。
               注意事项:只有变量可以自增自减，常量不可以自增自减。
    8.3 赋值运算符
        1：基本复制运算符：就是一个“=”，代表将右侧的数据交给左侧的变量；
        2：复合赋值运算符：
               +=        a += 1 --> a = a+1
               -=        a -= 1 --> a = a-1
               *=        a *= 1 --> a = a*5
               /=        a /= 1 --> a = a/1
               %=        a %= 1 --> a = a%1
        3：注意事项：
               只有变量才能使用赋值运算符，常量不能进行赋值；
               复合赋值运算符其中隐含了一个强制类型转换
    8.2 比较运算符
        1：种类：
               大于：>
               小于：<
               大于等于：>=
               小于等于：<=
               相等：==
               不相等：!=
        2：注意事项：比较运算符的结果一定是一个boolean值，成立就是true，不成立就是false；
                     如果进行多次判断，不能连着写；
    8.3 逻辑运算符
        1：种类：
               与（并且）  &&  全是true，才是true；否则就是false；
               或（或者）  ||  至少一个是true，就是true；全都是false，才是false；
               非（取反）  !   本来是true，变成false；本来是false，变成true。
        2：短路：
               与“&&”，或“||”都具有短路效果；
               短路效果就是如果根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，从而节省一定的性能
        3：注意事项：
               逻辑运算符只能用于boolean值；
               与、或需要左右各自有一个boolean值，但是取反只要有唯一的一个boolean值即可；
               与、或两种运算符，如果有多种条件，可以连续写（1<x<3  -->  1<x && x<3 ）
    8.4 三元运算符
        1：分类：
               一元运算符：只需要一个数据就可以进行操作的运算符。例如：取反!、自增++、自减--
               二元运算符：需要两个数据才可以进行操作的运算符。例如：加法+、赋值=
               三元运算符：需要三个数据才可以进行操作的运算符。例如：
        2：格式：
               数据类型 变量名称 = 条件判断 ? 表达式A：表达式B；
        3：流程：
               首先判断条件是否成立：
                    如果成立为true，那么将表达式A的值赋值给左侧的变量；
                    如果不成立为false，那么将表达式B的值赋值给左侧的变量；
               二者选其一。
        4：注意事项：
               必须同时保证表达式A和表达式B都符合左侧数据类型要求；
               三元运算符的结果必须被使用
