网络编程
    7.1 网络通信概述
        1：网络通信协议：
            TCP/IP协议四层模型：
                链路层（物理层、数据链路层）：
                    用于定义物理传输通道，通常是对某些网络连接设备的驱动协议。
                网络层：
                    是整个TCP/IP协议的核心，主要用于将传输的数据进行分组，将分组的数据发送到目标计算机或者网络。
                运输层：
                    主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。
                应用层：
                    主要负责应用程序的协议，例如HTTP协议、FTP协议等。
        2：网络通信协议分类：
            UDP：
                用户数据报协议。UDP是无连接通信协议；
                即在数据传输时，数据的发送端和接收端不建立逻辑连接。
                UDP协议消耗资源小，通信效率高，通常用于音频、视频和普通数据的传输。
                由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时比建议使用UDP协议。
                特点：
                    数据被限制在64kb以内，超出这个范围就不能发送了。
                数据报：
                    网络传输的基本单位。
            TCP：
                传输控制协议。TCP是面向连接的通信协议；
                即在传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据；
                它提供了两台计算机之间可靠无差错的数据传输。
                在TCP连接中必须要明确客户端和服务器端，由客户端与服务器之间的三次交互，以保证连接的可靠：
                    三次握手：
                        第一次握手：
                            客户端向服务器端发出连接请求，等待服务器确认。
                        第二次握手：
                            服务器向客户端回送一个响应，通知客户端收到了连接请求。
                        第三次握手：
                            客户端再次向服务器端发送确认信息，确认连接。
        3：网络编程三要素：
            协议：
                计算机网络通信必须遵守的规则。
            IP地址：
                指互联网协议地址，俗称IP；
                IP地址用来给一个网络中的计算机设备做唯一的编号。
                分类：
                    IPv4：
                        是一个32位的二进制数，通常被分为4个字节，表示成a.b.c.d的形式；
                        其中a、b、c、d都是0~255之间的十进制数，那么最多可以表示42亿个。
                    IPv6：
                        采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成ABCD:EF01:2345:6789:ABCD:EF01:2345:6789。
                特殊的IP地址：
                    本机地址：127.0.0.1、localhost
            端口号：
                用两个字节表示的整数，取值范围是0~65535；
                其中0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。
                端口号可以唯一标识设备中的进程（应用程序）。
                常用端口号：
                    80端口 网络端口：
                        www.baidu.com:80
                    数据库：
                        mysql：3306
                        oracle：1521
                    Tomcat服务器：
                        8080
    7.2 TCP协议：
        1：TCP通信程序概述：
            在Java中，提供了两个类用于实现TCP通信程序：
                客户端：
                    java.net.Socket类表示。
                    创建Socket对象，向服务器发出连接请求，服务器响应请求，两者建立连接开始通信。
                服务器端：
                    java.net.ServerSocket类表示。
                    创建ServerSocket对象，相当于开启一个服务，并等待客户端的连接。
        2：Socket类：
            此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。
            套接字：包含了IP地址和端口号的网络单位。
            构造方法：
                Socket(String host, int port)
                    创建一个流套接字并将其连接到指定主机上的指定端口号。
                参数：
                    String host：服务器主机的名称/服务器的IP地址。
                    int port：服务器的端口号。
            成员方法：
                OutputStream getOutputStream()
                    返回此套接字的输出流。
                InputStream getInputStream()
                    返回此套接字的输入流。
                void close()
                    关闭此套接字。
            实现步骤：
                创建一个客户端对象Socket，构造方法中绑定服务器的IP地址和端口号；
                使用Socket对象中的方法getOutputStream()，获取网络字节输出流OutputStream对象；
                使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据；
                使用Socket对象中的方法getInputStream()，获取网络字节输入流对象InputStream对象；
                使用网络字节输入流InputStream对象中方法read，读取服务器回写的数据；
                释放资源（Socket）。
            注意事项：
                客户端和服务器端进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象；
                但我们创建客户端对象Socket的时候，就会去请求服务器，和服务器经过三次握手建立通路，这时：
                    如果服务器没有启动，那么就会抛出异常；
                    如果服务器已经启动，那么就可以进行交互了。
        3：ServerSocket类：
            此类实现服务器套接字。服务器套接字等待请求通过网络传入。
            它基于该请求执行某些操作，然后可能向请求者返回结果。
            构造方法：
                ServerSocket(int port)
                    创建绑定到特定端口的服务器套接字。
                参数：
                    int port：指定的端口号
            服务器必须明确一件事情，必须知道是哪个客户端请求的服务器，
            所以使用accept方法获取到请求的客户端对象Socket
            成员方法：
                Socket accept()
                    侦听并接受到此套接字的连接。
            实现步骤：
                创建服务器ServerSocket对象和系统要指定的端口号；
                使用ServerSocket对象中的方法accept，获取到请求的客户端对象Socket；
                使用Socket对象中的方法getInputStream()，获取网络字节输入流对象InputStream对象;
                使用网络字节输入流InputStream对象中方法read，读取客户端发送的数据;
                使用Socket对象中的方法getOutputStream()，获取网络字节输出流OutputStream对象；
                使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据；
                释放资源（Socket、ServerSocket）