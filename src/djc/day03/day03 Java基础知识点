方法入门
    9.1 方法的定义
        1：格式：
                public static void 方法名称（）{
                    方法体
                }
        2：注意事项：
                方法定义的先后顺序无所谓；
                方法的定义不能产生嵌套包含关系；
                方法定义好了以后，不会执行。如果想要执行，一定要进行方法的【调用】。
    9.2 方法调用
        1：格式：
                方法名称（）;

流程控制
    10.1 概述
        在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程。
        而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能
    10.2 顺序结构

判断语句
    11.1 单if语句
        格式：
                if（关系表达式）{
                    语句体;
                }
    11.2 if...else语句
        格式：
                if(关系表达式){
                    语句体1;
                }else{
                    语句体2;
                }
    11.3 if...else if...else
        格式：
                if(判断条件1){
                    执行语句1;
                }else if（判断条件2）{
                    执行语句2;
                }
                ...
                }else if(判断条件n){
                    执行语句n;
                }else{
                    执行语句n+1;
                }

选择语句
    12.1 选择语句switch
        1：格式：
                switch(表达式){
                    case 常量值1:
                        语句体1;
                        break;
                    case 常量值2:
                        语句体2;
                        break;
                    ...
                    default:
                        语句体n+1;
                        break;
                }
        2：注意事项：
                多个case后的数值不能重复；
                switch语句后面小括号当中只能是以下数据类型：
                    基本数据类型：byte/short/char/int
                    引用数据类型：String字符串/enum枚举
                switch语句格式可以很灵活：
                    前后顺序可以颠倒，而且break语句还可以省略
                    匹配哪一个case就从哪一个位置向下执行，知道遇到了break或者整体结束为止。
