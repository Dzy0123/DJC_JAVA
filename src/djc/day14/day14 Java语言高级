集合
    4.1 Collection集合
        1：集合框架：
            集合按照其存储结构可以分为两大类，分别是：
                单列集合：java.util.Collection
                双列集合：java.util.Map
        2：Collection：
            单列集合类的根接口，用于存储一系列符合某种规则的元素；
            定义的是所有单列集合中共性的方法；
            所有单列集合都可以使用共性的方法；
            没有带索引的方法。
            他有两个子接口，分别是：
                java.util.List：
                    特点：
                        元素有序（存储和取出元素顺序相同）；
                        元素可重复；
                        有索引，可以使用普通的for循环遍历。
                    实现类：
                        java.util.ArrayList
                        java.util.LinkedList
                java.util.Set：
                    特点：
                        元素无序；
                        元素不可重复；
                        没有索引，不能使用普通的for循环遍历。
                    实现类：
                        java.util.HashSet
                        java.util.TreeSet
        3：Collection常用功能：
            Collection是所有单列集合的父接口，其中定义了单列集合（List和Set）通用的一些方法：
                public boolean add(E e)：
                    把给定的对象添加到集合当中
                public void clear()：
                    清空集合当中的所有元素
                public boolean remove(E e)：
                    把给定的对象在当前集合中删除
                public boolean contains(E e)：
                    判断当前集合中是否包含给定的对象
                public boolean isEmpty()：
                    判断当前集合是否为空
                public int size()：
                    返回集合中元素的个数
                public Object[] toArray()：
                    把集合中的元素，存储到数组中
    4.2 Iterator迭代器
        1：Iterator接口：
            java.util.Iterator接口是java集合中的一员；
            主要用于迭代访问(即遍历)Collection中的元素。
            获取方法：
                public Iterator iterator()
            迭代：
                在取元素之前先判断集合中有没有元素，如果有，就把这个元素取出来；
                继续判断，如果还有就继续取出来，一直把集合中的所有元素全部取出；
                这种取出方式专业术语称为迭代。
        2：Iterator接口常用方法：
            public E next()：
                返回迭代的下一个元素。
            public boolean hasNext()：
                如果仍有元素可以迭代，则返回true。
            注意：
                Iterator迭代器是一个接口，我们无法直接使用，需要使用Iterator接口的实现类；
                实现类获取方式比较特殊：
                    Collection接口中有一个方法，叫iterator()，这个方法返回的就是迭代器的实现类对象。
        3：迭代器使用步骤：
            使用集合中的方法iterator()获取迭代器的实现类对象，使用Iterator接口来接收(多态)；
            使用Iterator接口的hasNext方法判断还有没有下一个元素；
            使用Iterator接口的next方法取出集合中的下一个元素。
        4：增强for循环：
            增强for循环(也称为for each循环)是JDK1.5以后出来的一个高级for循环，专门用来遍历数组和集合的。
            它的内部原理其实是个Iterator迭代器，所以在遍历过程中不能对集合的元素进行增删操作。
            格式：
                for(元素的类型 变量: Collection集合 or 数组) {
                    //写操作代码
                }
    4.3 泛型
        1：概述：
            泛型是一种未知的数据类型，当我们不知道使用什么数据类型的时候，可以使用泛型；
            泛型也可以看成一种变量，用来接收数据类型；
            创建对象的时候，就会确定泛型的数据类型。
        2：优点：
            避免了类型转换的麻烦；
            把运行期异常提升到了编译期。
        3：泛型的定义和使用：
            定义格式：
                修饰符 class 类名<代表泛型的变量> {}
                例如：
                    class ArrayList<E> {
                        public boolean add(E e){ }
                        public E get(int index){ }
                        ...
                    }
        4：定义含有泛型的方法：
            泛型定义在方法的修饰符和返回值类型之间
            定义格式：
                修饰符<泛型> 返回值类型 方法名(参数列表(使用泛型)){
                    方法体;
                }
            注意：
                含有泛型的方法，在调用方法的时候确定泛型的数据类型；
                传递什么类型的参数，泛型就是什么类型。
        5：定义含有泛型的接口：
            定义格式：
                修饰符 interface接口名<代表泛型的变量> { }
        6：泛型通配符：
            当使用泛型或者接口时，传递的数据中，泛型类型不确定，可以通过通配符<?>表示。
            但是一旦使用通配符后，只能是由Object类中的共性方法，集合中元素自身方法无法使用。
            使用方法：
                 不能创建对象使用；
                 只能作为方法的参数使用；
            泛型通配符的高级使用——受限泛型：
                JAVA的泛型中可以指定一个泛型的上限和下限。
                泛型的上限：
                    格式：
                        类型名称 <? extends 类> 对象名称
                    意义：
                        使用的泛型只能是E类型的子类/本身
                泛型的下限：
                    格式：
                        类型名称 <? super 类> 对象名称
                    意义：
                        使用的泛型只能是E类型的父类/本身