    1.6 String类
        1：String类代表字符串,Java程序中的所有字符串字面值（如"abc"）都作为此类的实例实现。
           其实就是说：程序当中所有的双引号字符串，都是String类的对象。
        2：特点：
            字符串的内容永不可变；
            正是因为字符串永不可变，所以字符串是可以共享使用的；
            字符串效果上相当于是char[]字符数组，但是底层原理是byte[]字节数组；
        3：常见3+1种创建方式：
            三种构造方法：
                public String() //创建一个空白字符串，不含有任何内容
                public String(char[] array) //根据字符数组的内容，来创建对应的字符串
                public String(byte[] array) //根据字节数组的内容，来创建对应的字符串
            一种直接创建：
                String str = "";
        4：字符串的常量池：程序当中直接写上的双引号字符串，就在字符串常量池中。
            注意：
                对于基本类型来说，“==”是进行数值的比较；
                对于引用类型来说，“==”是进行地址值的比较；
                双引号直接写的字符串也就是直接创建的字符串保存在字符串常量池当中；
                new的不在常量池中。
        5：字符串比较相关方法：
            public boolean equals(Object obj)： //String类对equals方法默认进行了重写覆盖比较的是属性
                参数可以是任何对象，只有参数是一个字符串并且内容相同的才会给一个true;
                否则返回false。
            注意：
                任何对象都能用Object进行接收；
                equals方法具有对称性，也就是a.equals(b)和b.equals(a)效果一样；
                如果比较双方一个常量一个变量，推荐把常量字符串写在前面。
            public boolean equalsIgnoreCase(String str)：
                忽略大小写，进行内容的比较。
        6：字符串获取相关方法：
            public int length()：
                获取字符串当中含有的字符个数，拿到字符串长度。
            public String concat(String str)：
                将当前字符串和参数字符串拼接成为返回值新的字符串。
            public char charAt(int index)：
                获取指定索引位置的单个字符。
            public int indexOf(String str)：
                查找参数字符串在本字符串当中首次出现的索引位置，如果没有返回-1值。
        7：字符串当中的截取方法：
            public String substring(int index)：
                截取从参数位置一直到字符串末尾，返回新字符串。
            public String substring(int begin, int end)：
                截取从begin开始,一直到end结束中间的字符串。
                备注：[begin,end)，包含左边，不包含右边。
        8：字符串的转换方法：
            public char[] toCharArray()；
                将当前字符串拆分成为字符数组作为返回值。
            public byte[] getBytes()：
                获得当前字符串底层的字节数组。
            public String replace(CharSequence oldString, CharSequence newString)：
                将所有出现的老字符串替换为新的字符串返回替换后的新字符串。
                备注：CharSequence可以接受字符串类型
        9：字符串的分割方法：
            public String[] split(String regex)：
                按照参数的规则将字符串切分成为若干部分。
            注意事项：
                split方法的参数其实是一个正则表达式；
                如果按照“.”进行切分，必须写“\\.”。
    1.7 static类
        1：关键字static修饰成员变量：
            如果一个成员变量使用了static关键字，那么这个变量不再属于对象自己，而是属于所在的类。
            多个对象共享同一份数据。
        2：关键字static修饰成员方法：
            一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象而是属于类。
            如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。
            如果有了static关键字，那么不需要创建对象，直接就能通过类名使用它。
        3：不论是成员变量还是成员方法，如果有了static，都推荐使用类名称进行调用：
            静态变量：类名称.静态变量
            静态方法：类名称.静态方法()
        4：注意事项：
            静态只能直接访问静态，不能直接访问非静态；
                原因：因为在内存当中是先有的静态内容，后有的非静态内容（先人不知道后人，后人知道先人）
            静态方法中不能用this;
                原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。而调用时候是用类名称而不用对象名。
        5：静态代码块：
            格式：
                public class 类名称{
                    static{
                        //静态代码块的内容
                    }
                }
            特点：
                当第一次用到本类时，静态代码块执行唯一的一次;
                静态内容总是优先于非静态，所以静态代码块比构造方法先执行。
            典型用途：
                用来一次性地对静态成员变量进行赋值。
    1.8 Arrays工具类
        1：数组工具类：提供了大量的静态方法，用来实现数组常见的操作。
        2：两种常用方法：
            public static String toString(数组)：
                将参数数组变成字符串（按照默认格式：[元素1，元素2......]）
            public static void sort(数组)：
                按照默认升序对数组的元素进行排序
                备注：
                    如果是数值，那么sort默认按照升序；
                    如果是字符串，那么sort默认按照字母升序；
                    如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。
    1.9 Math类
        1：数学工具类：提供了大量的静态方法，完成与数学相关的操作。
        2：常用方法：
            public static double abs(double num)：
                获取绝对值。
            public static double ceil(double num)：
                向上取整。
            public static double floor(double num)：
                向下取整。
            public static long round(double num)：
                四舍五入。
            Math.PI代表近似的圆周率常量。